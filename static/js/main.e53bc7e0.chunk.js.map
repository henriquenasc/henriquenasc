{"version":3,"sources":["components/imgs/icons/linkedin.svg","components/imgs/icons/gmail.svg","components/imgs/icons/twitter.svg","components/imgs/icons/github.svg","components/imgs/icons/stackoverflow.svg","components/Menu.js","components/Main.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","Main","className","Footer","href","src","require","alt","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,kFCE5B,SAASC,IACtB,OACE,6BACE,6BACE,oCACA,yCCLO,SAASC,IACtB,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,eACb,uBAAGA,UAAU,eAAb,kBACiB,0BAAMA,UAAU,aAAhB,uBADjB,2CAKA,uBAAGA,UAAU,YAAb,4IAIA,uBAAGA,UAAU,YAAb,iCACiC,IAC/B,0BAAMA,UAAU,WAAhB,cAFF,OAEkD,IAChD,0BAAMA,UAAU,YAAhB,OAHF,gDCbR,IAqEeC,EArEA,kBACb,yBAAKD,UAAU,yBACb,4BACE,4BACE,uBAAGE,KAAK,8DACN,yBACEF,UAAU,cACVG,IAAKC,EAAQ,IACbC,IAAI,mBAKV,4BACE,uBAAGH,KAAK,wCACN,yBACEF,UAAU,cACVG,IAAKC,EAAQ,IACbC,IAAI,gBAKV,4BACE,uBAAGH,KAAK,+BACN,yBACEF,UAAU,cACVG,IAAKC,EAAQ,IACbC,IAAI,kBAKV,4BACE,uBAAGH,KAAK,mCACN,yBACEF,UAAU,cACVG,IAAKC,EAAQ,IACbC,IAAI,iBAKV,4BACE,uBAAGH,KAAK,gEACN,yBACEF,UAAU,cACVG,IAAKC,EAAQ,IACbC,IAAI,wBAKV,4BACE,uBACEH,KAAK,+DACLI,OAAO,UAEP,yBACEN,UAAU,cACVG,IAAK,iDACLE,IAAI,2BC7CDE,MAZf,WACE,OACE,yBAAKP,UAAU,OACb,yBAAKA,UAAU,wBACb,kBAACF,EAAD,MACA,kBAACC,EAAD,MACA,kBAAC,EAAD,SCAYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e53bc7e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/linkedin.dd70291b.svg\";","module.exports = __webpack_public_path__ + \"static/media/gmail.eab36d79.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.f14bedbf.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.3767138f.svg\";","module.exports = __webpack_public_path__ + \"static/media/stackoverflow.8db08d4b.svg\";","import React from \"react\";\r\n\r\nexport default function NavBar() {\r\n  return (\r\n    <nav>\r\n      <div>\r\n        <a>About</a>\r\n        <a>Projects</a>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Main() {\r\n  return (\r\n    <div className=\"section\">\r\n      <div className=\"description\">\r\n        <p className=\"text-header\">\r\n          Hi! My name is <span className=\"text-name\">Henrique Nascimento</span>.\r\n          Iâ€™m a 25 year-old web developer.\r\n        </p>\r\n\r\n        <p className=\"sub-text\">\r\n          Computer enthusiast, passionate about new technologies and people. I\r\n          like communities like (open source, makers, developers and others).\r\n        </p>\r\n        <p className=\"sub-text\">\r\n          Currently studying things like{\" \"}\r\n          <span className=\"span-js\">javascript</span> and{\" \"}\r\n          <span className=\"span-php\">PHP</span>. You can follow my projects in\r\n          my github.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nconst Footer = () => (\r\n  <div className=\"content-icons-socials\">\r\n    <ul>\r\n      <li>\r\n        <a href=\"https://www.linkedin.com/in/henrique-nascimento-021901117/\">\r\n          <img\r\n            className=\"icon-social\"\r\n            src={require(\"../components/imgs/icons/linkedin.svg\")}\r\n            alt=\"svg linkedin\"\r\n          />\r\n        </a>\r\n      </li>\r\n\r\n      <li>\r\n        <a href=\"mailto:henriquenascandrade@gmail.com\">\r\n          <img\r\n            className=\"icon-social\"\r\n            src={require(\"../components/imgs/icons/gmail.svg\")}\r\n            alt=\"svg gmail\"\r\n          />\r\n        </a>\r\n      </li>\r\n\r\n      <li>\r\n        <a href=\"https://twitter.com/He_Nasc\">\r\n          <img\r\n            className=\"icon-social\"\r\n            src={require(\"../components/imgs/icons/twitter.svg\")}\r\n            alt=\"svg twitter\"\r\n          />\r\n        </a>\r\n      </li>\r\n\r\n      <li>\r\n        <a href=\"https://github.com/henriquenasc\">\r\n          <img\r\n            className=\"icon-social\"\r\n            src={require(\"../components/imgs/icons/github.svg\")}\r\n            alt=\"svg github\"\r\n          />\r\n        </a>\r\n      </li>\r\n\r\n      <li>\r\n        <a href=\"https://pt.stackoverflow.com/users/62960/henrique-nascimento\">\r\n          <img\r\n            className=\"icon-social\"\r\n            src={require(\"../components/imgs/icons/stackoverflow.svg\")}\r\n            alt=\"svg stackoverflow\"\r\n          />\r\n        </a>\r\n      </li>\r\n\r\n      <li>\r\n        <a\r\n          href=\"https://www.dropbox.com/s/3bli0oayyyr7h8n/curriculo.pdf?dl=0\"\r\n          target=\"_blank\"\r\n        >\r\n          <img\r\n            className=\"icon-social\"\r\n            src={\"https://png.icons8.com/metro/1600/document.png\"}\r\n            alt=\"svg stackoverflow\"\r\n          />\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/Menu\";\nimport Main from \"./components/Main\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container App-header\">\n        <NavBar />\n        <Main />\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}